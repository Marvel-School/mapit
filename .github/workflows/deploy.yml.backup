name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          mkdir -p /opt/mapit/releases/$(date +%Y%m%d_%H%M%S)
          mkdir -p /opt/mapit/shared/storage
          mkdir -p /opt/mapit/shared/logs
        "

    - name: Copy deployment files
      run: |
        RELEASE_DIR="/opt/mapit/releases/$(date +%Y%m%d_%H%M%S)"
        scp -r docker/production/* ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }}:$RELEASE_DIR/
        scp docker-compose.production.yml ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }}:$RELEASE_DIR/docker-compose.yml

    - name: Create production environment file
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cat > /opt/mapit/shared/.env << 'EOF'
        # Production Environment Configuration
        APP_ENV=production
        APP_DEBUG=false
        APP_NAME=\"MapIt - Travel Destination Mapping\"
        APP_URL=https://mapitedu.nl

        # Database Configuration
        DB_CONNECTION=mysql
        DB_HOST=mysql
        DB_PORT=3306
        DB_DATABASE=mapit_production
        DB_USERNAME=mapit_prod_user
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        # Session Configuration
        SESSION_DRIVER=redis
        SESSION_LIFETIME=1440

        # Mail Configuration
        MAIL_DRIVER=smtp
        MAIL_HOST=${{ secrets.MAIL_HOST }}
        MAIL_PORT=${{ secrets.MAIL_PORT }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        MAIL_ENCRYPTION=tls

        # API Keys
        GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
        WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}

        # Security
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}

        # File Upload Settings
        MAX_UPLOAD_SIZE=10485760
        ALLOWED_IMAGE_TYPES=jpg,jpeg,png,webp

        # Cache Configuration
        CACHE_DRIVER=redis
        CACHE_PREFIX=mapit_prod_

        # Logging
        LOG_LEVEL=warning
        LOG_CHANNEL=daily

        # SSL Configuration
        SSL_ENABLED=true
        FORCE_HTTPS=true

        # Performance
        OPCACHE_ENABLED=true
        REDIS_CACHE_TTL=3600

        # Admin Settings
        ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}

        # Backup Configuration
        BACKUP_ENABLED=true
        BACKUP_SCHEDULE=daily
        BACKUP_RETENTION_DAYS=30
        EOF
        "

    - name: Deploy application
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd /opt/mapit
          
          # Update the current symlink to new release
          RELEASE_DIR=\"releases/\$(ls -t releases | head -n1)\"
          ln -sfn \$RELEASE_DIR current
          
          # Copy shared files
          ln -sfn /opt/mapit/shared/.env current/.env
          ln -sfn /opt/mapit/shared/storage current/storage
          ln -sfn /opt/mapit/shared/logs current/logs
          
          # Set proper permissions
          sudo chown -R www-data:www-data current/
          sudo chmod -R 755 current/
          sudo chmod -R 775 current/storage
          sudo chmod -R 775 current/logs
          
          # Pull latest images and restart services
          cd current
          docker compose pull
          docker compose down
          docker compose up -d
          
          # Run database migrations
          docker compose exec -T php php artisan migrate --force
          
          # Clear caches
          docker compose exec -T php php artisan cache:clear
          docker compose exec -T php php artisan config:clear
          docker compose exec -T php php artisan view:clear
          
          # Optimize for production
          docker compose exec -T php php artisan config:cache
          docker compose exec -T php php artisan route:cache
          docker compose exec -T php php artisan view:cache
        "

    - name: Health Check
      run: |
        sleep 30
        for i in {1..5}; do
          if curl -f -s https://mapitedu.nl/health; then
            echo "✅ Health check passed"
            exit 0
          fi
          echo "⏳ Waiting for application to be ready... (attempt $i/5)"
          sleep 10
        done
        echo "❌ Health check failed"
        exit 1

    - name: Cleanup old releases
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd /opt/mapit/releases
          # Keep only the 5 most recent releases
          ls -t | tail -n +6 | xargs -r rm -rf
        "

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🚀 Deployment to production successful!"
        else
          echo "❌ Deployment to production failed!"
        fi
