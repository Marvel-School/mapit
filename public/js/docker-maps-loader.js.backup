/**
 * Docker-specific Google Maps API Loader
 * This script addresses common issues with Google Maps API in Docker environments
 * including connectivity issues, IP address detection, and CORS problems.
 */

(function() {
    'use strict';
    
    // Settings for Docker environments
    const CONFIG = {
        MAX_RETRIES: 5,
        INITIAL_RETRY_DELAY: 1000,
        MAX_RETRY_DELAY: 10000,
        DEBUG: false,
        FALLBACK_LIBRARIES: ['places', 'marker', 'places,marker', ''],
        DOCKER_LOAD_TIMEOUT: 15000,
        CONNECTIVITY_CHECK_URLS: [
            'https://maps.googleapis.com/maps/api/js?v=3',
            'https://maps.gstatic.com/maps-api-v3/api/js/54/6/common.js'
        ]
    };

    // State tracking
    let state = {
        attempts: 0,
        libraryIndex: 0,
        apiKey: null,
        currentDelay: CONFIG.INITIAL_RETRY_DELAY,
        isLoading: false,
        hasLoaded: false,
        callbacks: []
    };

    /**
     * Check network connectivity to Google Maps services
     */
    function checkNetworkConnectivity() {
        return new Promise(resolve => {
            let checks = 0;
            let successful = 0;
            const totalChecks = CONFIG.CONNECTIVITY_CHECK_URLS.length;
            
            CONFIG.CONNECTIVITY_CHECK_URLS.forEach(url => {
                fetch(url, { 
                    method: 'HEAD',
                    mode: 'no-cors',
                    cache: 'no-cache'
                })
                .then(() => {
                                    })
                .catch(() => {
                    // Ignore errors for connectivity check
                })
                .finally(() => {
                    checks++;
                    if (checks === totalChecks) {
                        resolve(successful > 0);
                    }
                });
            });
            
            // Timeout fallback
            setTimeout(() => {
                if (checks < totalChecks) {
                    resolve(false);
                }
            }, 5000);
        });
    }

    /**
     * Detect whether we're running in a Docker container
     */
    function checkDockerEnvironment() {
        return new Promise(resolve => {
            const dockerIndicators = [
                window.location.hostname === 'localhost',
                window.location.port === '' || window.location.port === '80',
                document.querySelector('meta[name="environment"]')?.getAttribute('content') === 'docker'
            ];
            
            // Try to check server environment
            fetch('/api/debug/environment', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    resolve(data.isDocker === true || dockerIndicators.some(indicator => indicator));
                })
                .catch(() => {
                    // Fallback to client-side detection
                    resolve(dockerIndicators.some(indicator => indicator));
                });
        });
    }

    /**
     * Initialize the Google Maps loader
     */
    function init() {
        const metaElement = document.querySelector('meta[name="google-maps-api-key"]');
        state.apiKey = metaElement ? metaElement.getAttribute('content') : '';
          
        if (!state.apiKey) {
            showError('Google Maps API key not found in Docker environment');
            return;
        }

        Promise.all([
            checkDockerEnvironment(),
            checkNetworkConnectivity()
        ]).then(([isDocker, hasConnectivity]) => {
            if (isDocker) {
                if (!hasConnectivity) {
                    showError('No network connectivity to Google Maps services detected in Docker container');
                    return;
                }
                console.log('Docker environment detected, using enhanced loading strategy');
                loadWithRetry();
            } else {
                loadMapsApi();
            }
        }).catch(error => {
            console.warn('Environment detection failed, using fallback strategy:', error);
            loadWithRetry();
        });

        // Set up global error handler for auth failures
        window.gm_authFailure = function() {
            handleLoadError('auth_failure');
        };
    }    /**
     * Load Google Maps API with retry logic
     */
    function loadWithRetry() {
        if (state.isLoading || state.hasLoaded) {
            return;
        }

        state.isLoading = true;
        state.attempts++;

        if (state.attempts > CONFIG.MAX_RETRIES) {
            showError(`Failed to load Google Maps after ${CONFIG.MAX_RETRIES} attempts in Docker environment`);
            return;
        }

        console.log(`Docker Maps API load attempt ${state.attempts}/${CONFIG.MAX_RETRIES}`);
        
        const currentLibrary = CONFIG.FALLBACK_LIBRARIES[state.libraryIndex] || '';
        loadMapsApi(currentLibrary);
    }

    /**
     * Load the Google Maps API script
     */
    function loadMapsApi(libraries = 'places,marker') {
        return new Promise((resolve, reject) => {
            if (typeof google !== 'undefined' && google.maps) {
                state.hasLoaded = true;
                state.isLoading = false;
                runCallbacks();
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
              let url = `https://maps.googleapis.com/maps/api/js?key=${state.apiKey}&v=3&loading=async`;
            if (libraries) {
                url += `&libraries=${libraries}`;
            }
            // Add callback if initializeGoogleMaps exists
            if (typeof window.initializeGoogleMaps === 'function') {
                url += '&callback=initializeGoogleMaps';
            }
            
            script.src = url;            script.onload = function() {
                console.log('Google Maps API loaded successfully in Docker environment');
                state.hasLoaded = true;
                state.isLoading = false;
                
                // Call initializeGoogleMaps callback if it exists
                if (typeof window.initializeGoogleMaps === 'function') {
                    try {
                        window.initializeGoogleMaps();
                    } catch (error) {
                        console.error('Error in initializeGoogleMaps callback:', error);
                    }
                }
                
                runCallbacks();
                resolve();
            };

            script.onerror = function() {
                console.warn(`Maps API load failed with libraries: ${libraries}`);
                state.isLoading = false;
                
                // Try next library configuration
                state.libraryIndex++;
                if (state.libraryIndex < CONFIG.FALLBACK_LIBRARIES.length) {
                    setTimeout(() => {
                        loadWithRetry();
                    }, state.currentDelay);
                    state.currentDelay = Math.min(state.currentDelay * 2, CONFIG.MAX_RETRY_DELAY);
                } else {
                    // Reset library index and try again with increased delay
                    state.libraryIndex = 0;
                    state.currentDelay = Math.min(state.currentDelay * 2, CONFIG.MAX_RETRY_DELAY);
                    setTimeout(() => {
                        loadWithRetry();
                    }, state.currentDelay);
                }
                reject(new Error('Script load failed'));
            };

            // Set timeout for Docker environment
            setTimeout(() => {
                if (state.isLoading && !state.hasLoaded) {
                    console.warn('Maps API loading timeout in Docker environment');
                    script.onerror();
                }
            }, CONFIG.DOCKER_LOAD_TIMEOUT);

            document.head.appendChild(script);
        });
    }

    /**
     * Handle loading errors
     */
    function handleLoadError(errorType) {
        console.error(`Docker Maps loading error: ${errorType}`);
        state.isLoading = false;
        
        if (errorType === 'auth_failure') {
            showError('Google Maps API authentication failed. Please check your API key configuration in Docker environment.');
            return;
        }
        
        if (state.attempts < CONFIG.MAX_RETRIES) {
            setTimeout(() => {
                loadWithRetry();
            }, state.currentDelay);
            state.currentDelay = Math.min(state.currentDelay * 2, CONFIG.MAX_RETRY_DELAY);
        } else {
            showError('Google Maps failed to load in Docker environment after multiple attempts');
        }
    }

    /**
     * Show error message to user
     */
    function showError(message) {
        console.error(`Docker Maps Loader: ${message}`);
        
        const mapContainers = document.querySelectorAll('#map, #destinations-map, .map-container');
        mapContainers.forEach(container => {
            if (container) {
                container.innerHTML = `
                    <div class="alert alert-warning p-4 text-center">
                        <h5><i class="fas fa-exclamation-triangle"></i> Map Loading Issue</h5>
                        <p>${message}</p>
                        <p class="small">This appears to be a Docker environment. Please check:</p>
                        <ul class="list-unstyled small text-left">
                            <li>• Network connectivity to external services</li>
                            <li>• Google Maps API key configuration</li>
                            <li>• Docker container DNS resolution</li>
                            <li>• Content Security Policy settings</li>
                        </ul>
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="window.location.reload()">
                            <i class="fas fa-redo"></i> Retry
                        </button>
                    </div>
                `;
            }
        });
    }

    /**
     * Run any queued callbacks
     */
    function runCallbacks() {
        state.callbacks.forEach(callback => {
            try {
                callback();
            } catch (error) {
                console.error('Error running Maps API callback:', error);
            }
        });
        state.callbacks = [];
    }

    /**
     * Add callback to run when Maps API is loaded
     */
    function onMapsLoaded(callback) {
        if (state.hasLoaded) {
            callback();
        } else {
            state.callbacks.push(callback);
        }
    }

    // Export functions to global scope
    window.DockerMapsLoader = {
        init: init,
        onMapsLoaded: onMapsLoaded,
        isLoaded: () => state.hasLoaded
    };

    // Auto-initialize if DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
